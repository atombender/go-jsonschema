// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package test

import "fmt"
import "encoding/json"

type A62XNumeric struct {
	// MaxBoolIgnored corresponds to the JSON schema field "maxBoolIgnored".
	MaxBoolIgnored bool `json:"maxBoolIgnored"`

	// MaxInt corresponds to the JSON schema field "maxInt".
	MaxInt int `json:"maxInt"`

	// MaxInt0Excl corresponds to the JSON schema field "maxInt0Excl".
	MaxInt0Excl int `json:"maxInt0Excl"`

	// MaxIntOpt corresponds to the JSON schema field "maxIntOpt".
	MaxIntOpt *int `json:"maxIntOpt,omitempty"`

	// MaxNum corresponds to the JSON schema field "maxNum".
	MaxNum float64 `json:"maxNum"`

	// MaxNum0 corresponds to the JSON schema field "maxNum0".
	MaxNum0 float64 `json:"maxNum0"`

	// MaxNum0OptExcl corresponds to the JSON schema field "maxNum0OptExcl".
	MaxNum0OptExcl *float64 `json:"maxNum0OptExcl,omitempty"`

	// MaxStringIgnored corresponds to the JSON schema field "maxStringIgnored".
	MaxStringIgnored string `json:"maxStringIgnored"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *A62XNumeric) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["maxBoolIgnored"]; !ok || v == nil {
		return fmt.Errorf("field maxBoolIgnored: required")
	}
	if v, ok := raw["maxInt"]; !ok || v == nil {
		return fmt.Errorf("field maxInt: required")
	}
	if v, ok := raw["maxInt0Excl"]; !ok || v == nil {
		return fmt.Errorf("field maxInt0Excl: required")
	}
	if v, ok := raw["maxNum"]; !ok || v == nil {
		return fmt.Errorf("field maxNum: required")
	}
	if v, ok := raw["maxNum0"]; !ok || v == nil {
		return fmt.Errorf("field maxNum0: required")
	}
	if v, ok := raw["maxStringIgnored"]; !ok || v == nil {
		return fmt.Errorf("field maxStringIgnored: required")
	}
	type Plain A62XNumeric
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if plain.MaxInt > 42 {
		return fmt.Errorf("field maxInt: must not be > 42")
	}
	if plain.MaxInt0Excl >= 0 {
		return fmt.Errorf("field maxInt0Excl: must not be >= 0")
	}
	if plain.MaxIntOpt != nil && *plain.MaxIntOpt > 0 {
		return fmt.Errorf("field maxIntOpt: must not be > 0")
	}
	if plain.MaxNum > -42 {
		return fmt.Errorf("field maxNum: must not be > -42")
	}
	if plain.MaxNum0 > 0 {
		return fmt.Errorf("field maxNum0: must not be > 0")
	}
	if plain.MaxNum0OptExcl != nil && *plain.MaxNum0OptExcl >= 0 {
		return fmt.Errorf("field maxNum0OptExcl: must not be >= 0")
	}
	*j = A62XNumeric(plain)
	return nil
}
