// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package test

import "math"
import "fmt"
import "encoding/json"

type A62NumValidations struct {
	// MyExcludedNegativeValidatedFloat corresponds to the JSON schema field
	// "myExcludedNegativeValidatedFloat".
	MyExcludedNegativeValidatedFloat *float64 `json:"myExcludedNegativeValidatedFloat,omitempty"`

	// MyPositiveValidatedFloat corresponds to the JSON schema field
	// "myPositiveValidatedFloat".
	MyPositiveValidatedFloat *float64 `json:"myPositiveValidatedFloat,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *A62NumValidations) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	type Plain A62NumValidations
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if math.Mod(plain.MyExcludedNegativeValidatedFloat, 10.000000) != 0 {
		return fmt.Errorf("field myExcludedNegativeValidatedFloat: must be multiple of 10.000000")
	}
	if plain.MyExcludedNegativeValidatedFloat >= 0.000000 {
		return fmt.Errorf("field myExcludedNegativeValidatedFloat: must be smaller than 0.000000")
	}
	if plain.MyExcludedNegativeValidatedFloat <= -90.000000 {
		return fmt.Errorf("field myExcludedNegativeValidatedFloat: must be bigger than -90.000000")
	}
	if math.Mod(plain.MyPositiveValidatedFloat, 10.000000) != 0 {
		return fmt.Errorf("field myPositiveValidatedFloat: must be multiple of 10.000000")
	}
	if plain.MyPositiveValidatedFloat > 90.000000 {
		return fmt.Errorf("field myPositiveValidatedFloat: must be smaller or equal than 90.000000")
	}
	if plain.MyPositiveValidatedFloat < 0.000000 {
		return fmt.Errorf("field myPositiveValidatedFloat: must be bigger or equal than 0.000000")
	}
	*j = A62NumValidations(plain)
	return nil
}
