// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

package test

import "fmt"
import "encoding/json"

type A62NumValidations struct {
	// MyBiggerOrEqualThan90 corresponds to the JSON schema field
	// "myBiggerOrEqualThan90".
	MyBiggerOrEqualThan90 *float64 `json:"myBiggerOrEqualThan90,omitempty"`

	// MyBiggerThan90 corresponds to the JSON schema field "myBiggerThan90".
	MyBiggerThan90 *float64 `json:"myBiggerThan90,omitempty"`

	// MySmallerOrEqualThan90 corresponds to the JSON schema field
	// "mySmallerOrEqualThan90".
	MySmallerOrEqualThan90 *float64 `json:"mySmallerOrEqualThan90,omitempty"`

	// MySmallerThan90 corresponds to the JSON schema field "mySmallerThan90".
	MySmallerThan90 *float64 `json:"mySmallerThan90,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *A62NumValidations) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	type Plain A62NumValidations
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	if plain.MyBiggerOrEqualThan90 < 90.000000 {
		return fmt.Errorf("field myBiggerOrEqualThan90: must be bigger or equal than 90.000000")
	}
	if plain.MyBiggerThan90 <= 90.000000 {
		return fmt.Errorf("field myBiggerThan90: must be bigger than 90.000000")
	}
	if plain.MySmallerOrEqualThan90 > 90.000000 {
		return fmt.Errorf("field mySmallerOrEqualThan90: must be smaller or equal than 90.000000")
	}
	if plain.MySmallerThan90 >= 90.000000 {
		return fmt.Errorf("field mySmallerThan90: must be smaller than 90.000000")
	}
	*j = A62NumValidations(plain)
	return nil
}
